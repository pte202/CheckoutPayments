// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentGateway.DbContexts;

namespace PaymentGateway.Migrations
{
    [DbContext(typeof(PaymentGatewayDbContext))]
    partial class PaymentGatewayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentGateway.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "GBP",
                            Name = "Pound sterling"
                        },
                        new
                        {
                            Id = 2,
                            Code = "USD",
                            Name = "United States Dollar"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasFilter("[Identifier] IS NOT NULL");

                    b.HasIndex("PaymentCardId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1243,
                            CurrencyId = 1,
                            Date = new DateTime(2001, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identifier = "63d46c20-61bf-4c47-bfdc-6f08bc217406",
                            Method = "Card",
                            PaymentCardId = 1,
                            Status = "success"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Entities.PaymentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardIssuerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardIssuerId");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("PaymentCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardIssuerId = 1,
                            ExpiryDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Number = "4111111111111111"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Entities.PaymentCardIssuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pattern")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentCardIssuers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AmericanExpress",
                            Pattern = "^3[47][0-9]{5,}$"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Visa",
                            Pattern = "^4[0-9]{6,}$"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mastercard",
                            Pattern = "^5[1-5][0-9]{5,}|222[1-9][0-9]{3,}|22[3-9][0-9]{4,}|2[3-6][0-9]{5,}|27[01][0-9]{4,}|2720[0-9]{3,}$"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Entities.Payment", b =>
                {
                    b.HasOne("PaymentGateway.Entities.Currency", "Currency")
                        .WithMany("Payments")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentGateway.Entities.PaymentCard", "PaymentCard")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentGateway.Entities.PaymentCard", b =>
                {
                    b.HasOne("PaymentGateway.Entities.PaymentCardIssuer", "CardIssuer")
                        .WithMany("PaymentCards")
                        .HasForeignKey("CardIssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
